#!/usr/bin/env python3
"""
Generate data.js with:
- wine feature names, target names
- train/test split
- trained DecisionTreeClassifier exported as a simple tree structure

Outputs: data.js at repository root
"""
from __future__ import annotations

import json
from pathlib import Path
from dataclasses import dataclass
from typing import Any, Dict, List

import numpy as np
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier


@dataclass
class TreeNode:
    id: int
    feature: int | None
    threshold: float | None
    left: int | None
    right: int | None
    is_leaf: bool
    value: List[int]


def export_tree(clf: DecisionTreeClassifier) -> Dict[str, Any]:
    tree_ = clf.tree_
    nodes: List[TreeNode] = []
    for i in range(tree_.node_count):
        feature = int(tree_.feature[i]) if tree_.feature[i] >= 0 else None
        threshold = float(tree_.threshold[i]) if feature is not None else None
        left = int(tree_.children_left[i]) if tree_.children_left[i] != -1 else None
        right = int(tree_.children_right[i]) if tree_.children_right[i] != -1 else None
        is_leaf = feature is None
        value = [int(v) for v in tree_.value[i][0]]
        nodes.append(
            TreeNode(
                id=i,
                feature=feature,
                threshold=threshold,
                left=left,
                right=right,
                is_leaf=is_leaf,
                value=value,
            )
        )
    return {
        "nodes": [node.__dict__ for node in nodes],
        "n_classes": int(clf.n_classes_),
    }


def main() -> None:
    wine = load_wine()
    X = wine.data
    y = wine.target
    feature_names = list(wine.feature_names)
    target_names = [str(t) for t in wine.target_names]

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.25, random_state=42, stratify=y
    )

    clf = DecisionTreeClassifier(max_depth=4, random_state=0)
    clf.fit(X_train, y_train)

    tree_json = export_tree(clf)

    data = {
        "meta": {
            "featureNames": feature_names,
            "targetNames": target_names,
        },
        "tree": tree_json,
        "train": {
            "X": np.asarray(X_train, dtype=float).tolist(),
            "y": [int(v) for v in y_train.tolist()],
        },
        "test": {
            "X": np.asarray(X_test, dtype=float).tolist(),
            "y": [int(v) for v in y_test.tolist()],
        },
    }

    js = "// generated by export_data.py\n" + "window.DATA = " + json.dumps(data) + ";\n"
    out = Path(__file__).resolve().parent / "data.js"
    out.write_text(js)
    print(f"Wrote {out}")


if __name__ == "__main__":
    main()
